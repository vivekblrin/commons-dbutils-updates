/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.dbutils;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.lang.reflect.InvocationHandler;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * ProxyFactoryTest performs simple type checking on proxy objects returned from a ProxyFactory.
 */
public class ProxyFactoryTest extends BaseTestCase {

    private static final InvocationHandler stub = (proxy, method, args) -> null;

    public void testCreateCallableStatement() {
        assertNotNull(ProxyFactory.instance().createCallableStatement(stub));
    }

    public void testCreateConnection() {
        assertNotNull(ProxyFactory.instance().createConnection(stub));
    }

    public void testCreateDriver() {
        assertNotNull(ProxyFactory.instance().createDriver(stub));
    }

    public void testCreatePreparedStatement() {
        assertNotNull(ProxyFactory.instance().createPreparedStatement(stub));
    }

    public void testCreateResultSet() {
        assertNotNull(ProxyFactory.instance().createResultSet(stub));
    }

    public void testCreateResultSetMetaData() {
        assertNotNull(ProxyFactory.instance().createResultSetMetaData(stub));
    }

    public void testCreateStatement() {
        assertNotNull(ProxyFactory.instance().createStatement(stub));
    }

    public void testCreatePreparedStatementWithAutoGeneratedKeys() throws SQLException {
        Connection connection = mock(Connection.class);
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        String sql = "INSERT INTO table_name (column1, column2) VALUES (?, ?)";
        int autoGeneratedKeys = PreparedStatement.RETURN_GENERATED_KEYS;

        when(connection.prepareStatement(sql, autoGeneratedKeys)).thenReturn(preparedStatement);

        ProxyFactory proxyFactory = new ProxyFactory();
        PreparedStatement createdStatement = proxyFactory.createPreparedStatement(connection, sql, autoGeneratedKeys);

        assertNotNull(createdStatement);
        assertSame(preparedStatement, createdStatement);
    }


    public void testCreatePreparedStatementWithColumnIndexes() throws SQLException {
        Connection connection = mock(Connection.class);
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        String sql = "DELETE FROM table_name WHERE id = ?";
        int[] columnIndexes = {1};

        when(connection.prepareStatement(sql, columnIndexes)).thenReturn(preparedStatement);

        ProxyFactory proxyFactory = new ProxyFactory();
        PreparedStatement createdStatement = proxyFactory.createPreparedStatement(connection, sql, columnIndexes);

        assertNotNull(createdStatement);
        assertSame(preparedStatement, createdStatement);
    }


    public void testCreatePreparedStatementWithColumnNames() throws SQLException {
        Connection connection = mock(Connection.class);
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        String sql = "UPDATE table_name SET column1 = ? WHERE id = ?";
        String[] columnNames = {"column1"};

        when(connection.prepareStatement(sql, columnNames)).thenReturn(preparedStatement);

        ProxyFactory proxyFactory = new ProxyFactory();
        PreparedStatement createdStatement = proxyFactory.createPreparedStatement(connection, sql, columnNames);

        assertNotNull(createdStatement);
        assertSame(preparedStatement, createdStatement);
    }


}
